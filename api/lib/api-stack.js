"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiStack = void 0;
const cdk = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
const apigateway = require("aws-cdk-lib/aws-apigateway");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
const path = require("path");
const config_1 = require("./config");
class ApiStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Choose the appropriate DB endpoint based on the dev environment
        const dbEndpoint = config_1.DEV_ENV === "OSX"
            ? config_1.OSX_DB_ENDPOINT
            : config_1.DEV_ENV === "Windows"
                ? config_1.WINDOWS_DB_ENDPOINT
                : config_1.DEFAULT_DB_ENDPOINT;
        // DynamoDB Table
        const customerTable = new dynamodb.Table(this, "CustomerTable", {
            partitionKey: { name: "customerId", type: dynamodb.AttributeType.STRING },
        });
        // Lambda function for setting customer data
        const setCustomerFunction = new lambda.Function(this, "SetCustomerFunction", {
            runtime: lambda.Runtime.NODEJS_16_X,
            handler: "set-user.handler",
            code: lambda.Code.fromAsset(path.join(__dirname, "..", "lambda/users")),
            environment: {
                TABLE_NAME: customerTable.tableName,
                DB_ENDPOINT: dbEndpoint,
                LOCAL_TABLE_NAME: config_1.USERS_TABLE_NAME,
            },
        });
        // Grant permissions to the Lambda function to access DynamoDB
        customerTable.grantReadWriteData(setCustomerFunction);
        // Lambda function for getting customer data
        const getCustomerFunction = new lambda.Function(this, "GetCustomerFunction", {
            runtime: lambda.Runtime.NODEJS_16_X,
            handler: "get-user.handler",
            code: lambda.Code.fromAsset(path.join(__dirname, "..", "lambda/users")),
            environment: {
                TABLE_NAME: customerTable.tableName,
                DB_ENDPOINT: dbEndpoint,
                LOCAL_TABLE_NAME: config_1.USERS_TABLE_NAME,
            },
        });
        // Grant permissions to the Lambda function to access DynamoDB
        customerTable.grantReadData(getCustomerFunction);
        // API Gateway
        const api = new apigateway.RestApi(this, "CustomerApi");
        const setCustomerIntegration = new apigateway.LambdaIntegration(setCustomerFunction);
        const getCustomerIntegration = new apigateway.LambdaIntegration(getCustomerFunction);
        const customerResource = api.root.addResource("customer");
        customerResource.addMethod("POST", setCustomerIntegration);
        customerResource.addMethod("GET", getCustomerIntegration);
    }
}
exports.ApiStack = ApiStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBpLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFtQztBQUVuQyxpREFBaUQ7QUFDakQseURBQXlEO0FBQ3pELHFEQUFxRDtBQUNyRCw2QkFBNkI7QUFFN0IscUNBTWtCO0FBRWxCLE1BQWEsUUFBUyxTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBQ3JDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBc0I7UUFDOUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsa0VBQWtFO1FBQ2xFLE1BQU0sVUFBVSxHQUNkLGdCQUFPLEtBQUssS0FBSztZQUNmLENBQUMsQ0FBQyx3QkFBZTtZQUNqQixDQUFDLENBQUMsZ0JBQU8sS0FBSyxTQUFTO2dCQUN2QixDQUFDLENBQUMsNEJBQW1CO2dCQUNyQixDQUFDLENBQUMsNEJBQW1CLENBQUM7UUFFMUIsaUJBQWlCO1FBQ2pCLE1BQU0sYUFBYSxHQUFHLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFO1lBQzlELFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFO1NBQzFFLENBQUMsQ0FBQztRQUVILDRDQUE0QztRQUM1QyxNQUFNLG1CQUFtQixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FDN0MsSUFBSSxFQUNKLHFCQUFxQixFQUNyQjtZQUNFLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDbkMsT0FBTyxFQUFFLGtCQUFrQjtZQUMzQixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1lBQ3ZFLFdBQVcsRUFBRTtnQkFDWCxVQUFVLEVBQUUsYUFBYSxDQUFDLFNBQVM7Z0JBQ25DLFdBQVcsRUFBRSxVQUFVO2dCQUN2QixnQkFBZ0IsRUFBRSx5QkFBZ0I7YUFDbkM7U0FDRixDQUNGLENBQUM7UUFFRiw4REFBOEQ7UUFDOUQsYUFBYSxDQUFDLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFFdEQsNENBQTRDO1FBQzVDLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUM3QyxJQUFJLEVBQ0oscUJBQXFCLEVBQ3JCO1lBQ0UsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztZQUNuQyxPQUFPLEVBQUUsa0JBQWtCO1lBQzNCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQUM7WUFDdkUsV0FBVyxFQUFFO2dCQUNYLFVBQVUsRUFBRSxhQUFhLENBQUMsU0FBUztnQkFDbkMsV0FBVyxFQUFFLFVBQVU7Z0JBQ3ZCLGdCQUFnQixFQUFFLHlCQUFnQjthQUNuQztTQUNGLENBQ0YsQ0FBQztRQUVGLDhEQUE4RDtRQUM5RCxhQUFhLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFFakQsY0FBYztRQUNkLE1BQU0sR0FBRyxHQUFHLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDeEQsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLFVBQVUsQ0FBQyxpQkFBaUIsQ0FDN0QsbUJBQW1CLENBQ3BCLENBQUM7UUFDRixNQUFNLHNCQUFzQixHQUFHLElBQUksVUFBVSxDQUFDLGlCQUFpQixDQUM3RCxtQkFBbUIsQ0FDcEIsQ0FBQztRQUVGLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUQsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1FBQzNELGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztJQUM1RCxDQUFDO0NBQ0Y7QUFwRUQsNEJBb0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWxhbWJkYVwiO1xuaW1wb3J0ICogYXMgYXBpZ2F0ZXdheSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWFwaWdhdGV3YXlcIjtcbmltcG9ydCAqIGFzIGR5bmFtb2RiIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZHluYW1vZGJcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IE5vZGVqc0Z1bmN0aW9uLCBOb2RlanNGdW5jdGlvblByb3BzIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWxhbWJkYS1ub2RlanMnO1xuaW1wb3J0IHtcbiAgREVWX0VOVixcbiAgT1NYX0RCX0VORFBPSU5ULFxuICBXSU5ET1dTX0RCX0VORFBPSU5ULFxuICBERUZBVUxUX0RCX0VORFBPSU5ULFxuICBVU0VSU19UQUJMRV9OQU1FLFxufSBmcm9tIFwiLi9jb25maWdcIjtcblxuZXhwb3J0IGNsYXNzIEFwaVN0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBjZGsuU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgLy8gQ2hvb3NlIHRoZSBhcHByb3ByaWF0ZSBEQiBlbmRwb2ludCBiYXNlZCBvbiB0aGUgZGV2IGVudmlyb25tZW50XG4gICAgY29uc3QgZGJFbmRwb2ludCA9XG4gICAgICBERVZfRU5WID09PSBcIk9TWFwiXG4gICAgICAgID8gT1NYX0RCX0VORFBPSU5UXG4gICAgICAgIDogREVWX0VOViA9PT0gXCJXaW5kb3dzXCJcbiAgICAgICAgPyBXSU5ET1dTX0RCX0VORFBPSU5UXG4gICAgICAgIDogREVGQVVMVF9EQl9FTkRQT0lOVDtcblxuICAgIC8vIER5bmFtb0RCIFRhYmxlXG4gICAgY29uc3QgY3VzdG9tZXJUYWJsZSA9IG5ldyBkeW5hbW9kYi5UYWJsZSh0aGlzLCBcIkN1c3RvbWVyVGFibGVcIiwge1xuICAgICAgcGFydGl0aW9uS2V5OiB7IG5hbWU6IFwiY3VzdG9tZXJJZFwiLCB0eXBlOiBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlLlNUUklORyB9LFxuICAgIH0pO1xuXG4gICAgLy8gTGFtYmRhIGZ1bmN0aW9uIGZvciBzZXR0aW5nIGN1c3RvbWVyIGRhdGFcbiAgICBjb25zdCBzZXRDdXN0b21lckZ1bmN0aW9uID0gbmV3IGxhbWJkYS5GdW5jdGlvbihcbiAgICAgIHRoaXMsXG4gICAgICBcIlNldEN1c3RvbWVyRnVuY3Rpb25cIixcbiAgICAgIHtcbiAgICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE2X1gsXG4gICAgICAgIGhhbmRsZXI6IFwic2V0LXVzZXIuaGFuZGxlclwiLFxuICAgICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgXCIuLlwiLCBcImxhbWJkYS91c2Vyc1wiKSksXG4gICAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgICAgVEFCTEVfTkFNRTogY3VzdG9tZXJUYWJsZS50YWJsZU5hbWUsXG4gICAgICAgICAgREJfRU5EUE9JTlQ6IGRiRW5kcG9pbnQsXG4gICAgICAgICAgTE9DQUxfVEFCTEVfTkFNRTogVVNFUlNfVEFCTEVfTkFNRSxcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gR3JhbnQgcGVybWlzc2lvbnMgdG8gdGhlIExhbWJkYSBmdW5jdGlvbiB0byBhY2Nlc3MgRHluYW1vREJcbiAgICBjdXN0b21lclRhYmxlLmdyYW50UmVhZFdyaXRlRGF0YShzZXRDdXN0b21lckZ1bmN0aW9uKTtcblxuICAgIC8vIExhbWJkYSBmdW5jdGlvbiBmb3IgZ2V0dGluZyBjdXN0b21lciBkYXRhXG4gICAgY29uc3QgZ2V0Q3VzdG9tZXJGdW5jdGlvbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24oXG4gICAgICB0aGlzLFxuICAgICAgXCJHZXRDdXN0b21lckZ1bmN0aW9uXCIsXG4gICAgICB7XG4gICAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLk5PREVKU18xNl9YLFxuICAgICAgICBoYW5kbGVyOiBcImdldC11c2VyLmhhbmRsZXJcIixcbiAgICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUFzc2V0KHBhdGguam9pbihfX2Rpcm5hbWUsIFwiLi5cIiwgXCJsYW1iZGEvdXNlcnNcIikpLFxuICAgICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICAgIFRBQkxFX05BTUU6IGN1c3RvbWVyVGFibGUudGFibGVOYW1lLFxuICAgICAgICAgIERCX0VORFBPSU5UOiBkYkVuZHBvaW50LFxuICAgICAgICAgIExPQ0FMX1RBQkxFX05BTUU6IFVTRVJTX1RBQkxFX05BTUUsXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgKTtcblxuICAgIC8vIEdyYW50IHBlcm1pc3Npb25zIHRvIHRoZSBMYW1iZGEgZnVuY3Rpb24gdG8gYWNjZXNzIER5bmFtb0RCXG4gICAgY3VzdG9tZXJUYWJsZS5ncmFudFJlYWREYXRhKGdldEN1c3RvbWVyRnVuY3Rpb24pO1xuXG4gICAgLy8gQVBJIEdhdGV3YXlcbiAgICBjb25zdCBhcGkgPSBuZXcgYXBpZ2F0ZXdheS5SZXN0QXBpKHRoaXMsIFwiQ3VzdG9tZXJBcGlcIik7XG4gICAgY29uc3Qgc2V0Q3VzdG9tZXJJbnRlZ3JhdGlvbiA9IG5ldyBhcGlnYXRld2F5LkxhbWJkYUludGVncmF0aW9uKFxuICAgICAgc2V0Q3VzdG9tZXJGdW5jdGlvblxuICAgICk7XG4gICAgY29uc3QgZ2V0Q3VzdG9tZXJJbnRlZ3JhdGlvbiA9IG5ldyBhcGlnYXRld2F5LkxhbWJkYUludGVncmF0aW9uKFxuICAgICAgZ2V0Q3VzdG9tZXJGdW5jdGlvblxuICAgICk7XG5cbiAgICBjb25zdCBjdXN0b21lclJlc291cmNlID0gYXBpLnJvb3QuYWRkUmVzb3VyY2UoXCJjdXN0b21lclwiKTtcbiAgICBjdXN0b21lclJlc291cmNlLmFkZE1ldGhvZChcIlBPU1RcIiwgc2V0Q3VzdG9tZXJJbnRlZ3JhdGlvbik7XG4gICAgY3VzdG9tZXJSZXNvdXJjZS5hZGRNZXRob2QoXCJHRVRcIiwgZ2V0Q3VzdG9tZXJJbnRlZ3JhdGlvbik7XG4gIH1cbn1cbiJdfQ==